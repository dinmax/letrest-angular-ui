/*! letrest-ui - v1.0.10 - 2015-03-03 */"use strict";angular.module("letrest",["ngCookies","ngResource"]).config(["letrestConfigProvider",function(a){a.$get().URLS.REST={BASE:{URL:"http://localhost:8080/"}}}]).config(["$httpProvider",function(a){a.defaults.useXDomain=!0,delete a.defaults.headers.common["X-Requested-With"]}]);var LetRestService=function(a,b,c,d,e,f){var g={};g.services={};var h=function(c){var e=a.defer();if(void 0===g.services[c]){var h=b(f.URLS.REST.BASE.URL+"api/_discover/definition/"+c);h.get({},function(a){if(a&&a.type!==c)throw"Entity not found";g.services[c]=a,e.resolve(a)},function(a){d.error("Unable to retrive definition for type",c,a),e.reject(a)})}else e.resolve(g.services[c]);return e.promise},i=function(c){var d=a.defer();return h(c.type).then(function(a){a.host=f.URLS.REST.BASE.URL;var e=b(a.host+a.url+" ",a.map,{update:{method:"PUT"},getAll:{method:"GET",url:a.host+a.url}});c.connection=e,c.map=e.map,d.resolve(c)}),d.promise},j=function(a){return g.services[a]["new"]},k=function(a,b){var c={};return a.forEach(function(a){var d=a.replace(/^[?](.*)/,"$1");if(b[d]||0===b[d])c[d]=b[d];else if(0!==a.indexOf("?"))throw"LetRest - Param "+d+" is mandatory."}),c};return g.getDefinition=function(a){return d.info("Finding definition for",a),c.get(f.URLS.REST.BASE.URL+"api/_discover/crud/"+a).then(function(a){return a.data})},g.getLetRestService=function(b){if(d.info("Instanciating Rest service for",b),void 0===b)throw"LetRest - Type "+b+" not found";var c=function(b){var c=a.defer();return b.connection["delete"]({},b.map,function(a){c.resolve(a)}),c.promise},e=function(b){var c=a.defer();return b.connection.get({},b.map,function(a){c.resolve(a)}),c.promise},f=function(b){var c=b.me,d=a.defer();return b.connection.getAll(b.map,function(a){c.all.length=a.data.length;for(var b=0;b<a.data.length;b++)c.all[b]=a.data[b];c.totalRows=Number(a.total_rows),d.resolve(a)}),d.promise},h=function(a){return a.map=k(g.services[a.type].actions[a.action].params,a.object),a},l=function(a,c,d){return{type:b,action:a,object:d,me:c,map:null}},m=function(a){return a.action=void 0===a.object[g.services[b].id]||""===a.object[g.services[b].id]?"POST":"PUT",a},n=function(b){var c={PUT:"update",POST:"save"},d=a.defer();return b.connection[c[b.action]](b.map,b.object,function(a){d.resolve(a)}),d.promise};return{type:b,totalRows:0,all:[],one:{},get:function(a){return i(l("GET",this,a)).then(h).then(e)},getAll:function(a){return d.info("Doing query all on type",b),i(l("ALL",this,a)).then(h).then(f)},save:function(a){return i(l("TBD",this,a)).then(m).then(h).then(n)},"delete":function(a){return i(l("DELETE",this,a)).then(h).then(c)},hasGroup:function(){return null},getNew:function(){var a=j(this.type);return"undefined"!=typeof a?a:{}}}},g};LetRestService.$inject=["$q","$resource","$http","$log","$cookies","letrestConfig"],angular.module("letrest").factory("LetRestService",LetRestService),angular.module("letrest").provider("letrestConfig",function(){var a={};a.URLS={},this.$get=function(){return a}}),angular.module("letrest").controller("LetRestSecurityModalLoginController",["$scope","$cookies","$http","$modalInstance","LetRestSecurityService","LetRestSecurityEvents",function(a,b,c,d,e,f){var g=this;this.modal=!0,this.login=function(){g.username&&g.password?(g.isWorking=!0,e.login(g.username,g.password).then(function(){d.close()})["catch"](function(a){g.error=a})["finally"](function(){g.isWorking=!1})):g.error="User and password should not be empty."},f.bindToSecurity(function(){angular.copy("",g.username),angular.copy("",g.password)})}]),angular.module("letrest").controller("LetRestSecurityLoginController",["$http","$q","LetRestSecurityService",function(a,b,c){var d=this;this.login=function(){var a=b.defer();return d.username&&d.password?(d.isWorking=!0,c.login(d.username,d.password).then(function(){a.resolve()})["catch"](function(a){d.error=a})["finally"](function(){d.isWorking=!1})):d.error="User and password should not be empty.",a}}]);var LR_HIDE_CLASS="lr-hide",LR_HIDE_IN_PROGRESS_CLASS="lr-hide-animate";angular.module("letrest").directive("lrSecurity",["LetRestSecurityEvents","$modal",function(a,b){return{restrict:"E",link:function(c,d){var e="200px";d.addClass(LR_HIDE_CLASS),a.bindToSync(function(a,b){d[b?"addClass":"removeClass"](LR_HIDE_CLASS)}),a.bindToDoLogin(function(){var a=b.open({backdrop:"static",controller:"LetRestSecurityModalLoginController",controllerAs:"Login",templateUrl:"letrest/view/security/LoginView.html",size:e,resolve:{}});a.result.then(function(){})}),a.bindToPanic(function(a,c){b.open({backdrop:"static",controller:["$scope","message",function(a,b){a.message=b}],templateUrl:"letrest/view/security/PanicView.html",size:e,keyboard:!1,resolve:{message:function(){return c}}})})}}}]),angular.module("letrest").directive("lrShowAtLeastOn",["LetRestSecurityService","LetRestSecurityEvents",function(a,b){return{restrict:"A",link:function(c,d,e){var f=function(){d[a.validate(e.lrShowAtLeastOn)?"removeClass":"addClass"](LR_HIDE_CLASS)};e.$observe("lrShowAtLeastOn",function(){f()}),b.bindToSecurity(f)}}}]),angular.module("letrest").directive("lrShowWhenLogged",["LetRestSecurityService","LetRestSecurityEvents",function(a,b){return{restrict:"AE",link:function(c,d){var e=function(){d[a.hasUser()?"removeClass":"addClass"](LR_HIDE_CLASS)};b.bindToSecurity(e),e()}}}]),angular.module("letrest").directive("lrHideWhenLogged",["LetRestSecurityService","LetRestSecurityEvents",function(a,b){return{restrict:"AE",link:function(c,d){var e=function(){d[a.hasUser()?"addClass":"removeClass"](LR_HIDE_CLASS)};b.bindToSecurity(e),e()}}}]),angular.module("letrest").directive("lrClassWhenLogged",["LetRestSecurityService","LetRestSecurityEvents",function(a,b){return{restrict:"A",link:function(c,d,e){if(angular.isDefined(e.lrClassWhenLogged)){var f=function(){d[a.hasUser()?"addClass":"removeClass"](e.lrClassWhenLogged)};b.bindToSecurity(f),f()}}}}]),angular.module("letrest").filter("lrHasPermissions",["LetRestSecurityService",function(a){return function(b){var c=[];return angular.forEach(b,function(b){void 0!=b.weight&&a.validate(b.weight)&&c.push(b)}),c}}]),angular.module("letrest").run(["LetRestSecurityService",function(a){a.sync()}]);var httpInterceptor=function(a,b){a.factory("httpInterceptor",["$q","LetRestSecurityEvents",function(a,b){return{response:function(b){return b||a.when(b)},responseError:function(c){return 401===c.status&&b.doLogin(),403===c.status&&b.panic(new Error("You are trying to access a service that is beyond your rights.")),a.reject(c)}}}]),b.interceptors.push("httpInterceptor")};httpInterceptor.$inject=["$provide","$httpProvider"],angular.module("letrest").config(httpInterceptor);var LetRestSecurityEvents=function(a){var b={PANIC:"PANIC@LR",SECURITY:"SECURITYCHANGED@LR",DOLOGIN:"DOLOGIN@LR",SYNC:"DOSYNC@LR"},c={};return c.panic=function(c){c=c.toString&&!c.config?c.toString():"Connectivity problem",a.$broadcast(b.PANIC,c)},c.securityChanged=function(){a.$broadcast(b.SECURITY)},c.doLogin=function(){a.$broadcast(b.DOLOGIN)},c.syncBegin=function(){a.$broadcast(b.SYNC,!0)},c.syncEnd=function(){a.$broadcast(b.SYNC,!1),c.securityChanged()},c.bindToSync=function(c){a.$on(b.SYNC,c)},c.bindToDoLogin=function(c){a.$on(b.DOLOGIN,c)},c.bindToPanic=function(c){a.$on(b.PANIC,c)},c.bindToSecurity=function(c){a.$on(b.SECURITY,c)},c};LetRestSecurityEvents.$inject=["$rootScope"],angular.module("letrest").factory("LetRestSecurityEvents",LetRestSecurityEvents);var LetRestSecurityService=function(a,b,c,d,e,f,g){var h=function(a){return a?a:{name:"Guest",role:{name:"Guest",weight:-1}}},i={syncing:!1,roles:{},session:h()};return i.logout=function(){angular.copy(h(),i.session),delete e.TOKEN,f.securityChanged()},i.hasUser=function(){return i.session.role.weight>=0},i.sync=function(){d.info("Syncing with server"),i.syncing=!0,f.syncBegin(),i.adjustSession();var a=b(g.URLS.REST.BASE.URL+"api/session/roles").get().$promise;a.then(function(a){angular.copy(a.data.roles,i.roles),angular.copy(h(a.data.session),i.session),f.securityChanged()})["catch"](function(a){f.panic(a),d.error(a)})["finally"](function(){d.info("Session synced"),i.syncing=!1,f.syncEnd()})},i.adjustSession=function(){c.defaults.headers.common.Token=e.TOKEN},i.login=function(c,d){var j=b(g.URLS.REST.BASE.URL+"api/session/login").save({},{username:c,password:d}).$promise,k=a.defer();return j.then(function(a){a&&a.type&&"error"==a.type?k.reject(a.msg):(e.TOKEN=a.token,angular.copy(a.session.roles,i.roles),angular.copy(h(a.session.session),i.session),i.adjustSession(),f.securityChanged(),k.resolve())})["catch"](function(a){k.reject(a)}),k.promise},i.validate=function(a){var b=i.session.role.weight,c=-1e7;return isNaN(a)?isNaN(i.roles[a])||(d.info("Security weight for role is",i.roles[a]),c=i.roles[a]):c=a,b>=c},i};LetRestSecurityService.$inject=["$q","$resource","$http","$log","$cookies","LetRestSecurityEvents","letrestConfig"],angular.module("letrest").factory("LetRestSecurityService",LetRestSecurityService),angular.module("letrest").run(["$templateCache",function(a){a.put("letrest/view/security/LoginView.html",'<div class=modal-header><!--<h3 class="modal-title">Welcome to Tapstone</h3>--><img src=images/logo_welcome.png class="img-responsive center-block"></div><div class=modal-body ng-init="Login.username=\'\';Login.password=\'\'"><form ng-submit=Login.login()><p class=text-center><input ng-model=Login.username placeholder=Username class=text-login></p><p class=text-center><input type=password ng-model=Login.password placeholder=Password class=text-login></p><p class=text-center><span class=text-warning>{{Login.error}}</span></p><p class=text-center><button class="btn btn-primary btn-sm" ng-class={disabled:isWorking} ng-click=Login.login()><span ng-if=Login.isWorking><i class="fa fa-spinner fa-spin"></i></span>Login</button></p></form></div><div class=modal-footer></div>'),a.put("letrest/view/security/PanicView.html",'<div class=modal-header><h3 class=modal-title>Unrecoverable Error</h3></div><div class=modal-body><p class="text-danger h1"><i class="fa fa-exclamation-triangle"></i>{{message||\'Undefined error\'}}</p><p class="text-danger h4">This happens because a critial requirement has failed, try reloading the page or contact your System Administrator.</p></div>')}]);