/*! letrest-ui - v1.0.19 - 2016-07-06 */"use strict";angular.module("letrest",["ngCookies","ngResource"]).config(["letrestConfigProvider",function(a){a.$get().URLS.REST={BASE:{URL:"http://localhost:8080/"}}}]).config(["$httpProvider",function(a){a.defaults.useXDomain=!0,delete a.defaults.headers.common["X-Requested-With"]}]);var LetRestService=function(a,b,c,d,e,f){var g={};g.services={};var h=function(c){var e=a.defer();if(void 0===g.services[c]){var h=b(f.URLS.REST.BASE.URL+"api/_discover/definition/"+c);h.get({},function(a){if(a&&a.type!==c)throw"Entity not found";g.services[c]=a,e.resolve(a)},function(a){d.error("Unable to retrive definition for type",c,a),e.reject(a)})}else e.resolve(g.services[c]);return e.promise},i=function(c){var e=a.defer();return h(c.type).then(function(a){a.host=f.URLS.REST.BASE.URL;var d=b(a.host+a.url+" ",a.map,{update:{method:"PUT"},getAll:{method:"GET",url:a.host+a.url}});c.connection=d,c.map=d.map,e.resolve(c)}).catch(function(a){d.error("Unable to get connection for request type ",c.type,a),e.reject(a)}),e.promise},j=function(a){return g.services[a].new},k=function(a,b){var c={};return a.forEach(function(a){var d=a.replace(/^[?](.*)/,"$1");if(b[d]||0===b[d])c[d]=b[d];else if(0!==a.indexOf("?"))throw"LetRest - Param "+d+" is mandatory."}),c};return g.getDefinition=function(a){return d.info("Finding definition for",a),c.get(f.URLS.REST.BASE.URL+"api/_discover/crud/"+a).then(function(a){return a.data})},g.getLetRestService=function(b){if(d.info("Instanciating Rest service for",b),void 0===b)throw"LetRest - Type "+b+" not found";var c=function(a){return a.connection.get({},a.map).$promise},e=function(b){function c(a){d.all.length=a.data.length;for(var b=0;b<a.data.length;b++)d.all[b]=a.data[b];d.totalRows=Number(a.total_rows),e.resolve(a)}var d=b.me,e=a.defer();return b.connection.getAll(b.map,c,e.reject),e.promise},f=function(a){var b={PUT:"update",POST:"save"};return a.connection[b[a.action]](a.map,a.object).$promise},h=function(a){return a.connection.delete({},a.map).$promise},l=function(a){return a.map=k(g.services[a.type].actions[a.action].params,a.object),a},m=function(a,c,d){return{type:b,action:a,object:d,me:c,map:null}},n=function(a){return void 0===a.object[g.services[b].id]||""===a.object[g.services[b].id]?a.action="POST":a.action="PUT",a};return{type:b,totalRows:0,all:[],one:{},get:function(a){return i(m("GET",this,a)).then(l).then(c)},getAll:function(a){return d.info("Doing query all on type",b),i(m("ALL",this,a)).then(l).then(e)},save:function(a){return i(m("TBD",this,a)).then(n).then(l).then(f)},delete:function(a){return i(m("DELETE",this,a)).then(l).then(h)},hasGroup:function(){return null},getNew:function(){var a=j(this.type);return"undefined"!=typeof a?a:{}}}},g};LetRestService.$inject=["$q","$resource","$http","$log","$cookies","letrestConfig"],angular.module("letrest").factory("LetRestService",LetRestService),angular.module("letrest").provider("letrestConfig",function(){var a={};a.URLS={},this.$get=function(){return a}}),angular.module("letrest").controller("LetRestSecurityModalLoginController",["$scope","$cookies","$http","$modalInstance","LetRestSecurityService","LetRestSecurityEvents",function(a,b,c,d,e,f){var g=this;this.modal=!0,this.login=function(){g.username&&g.password?(g.isWorking=!0,e.login(g.username,g.password).then(function(a){d.close()}).catch(function(a){g.error=a}).finally(function(){g.isWorking=!1})):g.error="User and password should not be empty."},f.bindToSecurity(function(){angular.copy("",g.username),angular.copy("",g.password)})}]),angular.module("letrest").controller("LetRestSecurityLoginController",["$http","$q","LetRestSecurityService",function(a,b,c){var d=this;this.login=function(){var a=b.defer();return d.username&&d.password?(d.isWorking=!0,c.login(d.username,d.password).then(function(b){a.resolve()}).catch(function(a){d.error=a}).finally(function(){d.isWorking=!1})):d.error="User and password should not be empty.",a}}]),function(){function a(a,b){return{restrict:"E",link:function(c,d,e){var g="200px";d.addClass(f),a.bindToSync(function(a,b){d[b?"addClass":"removeClass"](f)}),a.bindToDoLogin(function(){var a=b.open({backdrop:"static",controller:"LetRestSecurityModalLoginController",controllerAs:"Login",templateUrl:"letrest/view/security/LoginView.html",size:g,resolve:{}});a.result.then(function(){})}),a.bindToPanic(function(a,c){b.open({backdrop:"static",controller:["$scope","message",function(a,b){a.message=b}],templateUrl:"letrest/view/security/PanicView.html",size:g,keyboard:!1,resolve:{message:function(){return c}}})})}}}function b(a,b){return{restrict:"A",link:function(c,d,e){var g=function(){d[a.validate(e.lrShowAtLeastOn)?"removeClass":"addClass"](f)};e.$observe("lrShowAtLeastOn",function(a,b){g()}),b.bindToSecurity(g)}}}function c(a,b){return{restrict:"AE",link:function(c,d,e){var g=function(){d[a.hasUser()?"removeClass":"addClass"](f)};b.bindToSecurity(g),g()}}}function d(a,b){return{restrict:"AE",link:function(c,d,e){var g=function(){d[a.hasUser()?"addClass":"removeClass"](f)};b.bindToSecurity(g),g()}}}function e(a,b){return{restrict:"A",link:function(c,d,e){if(angular.isDefined(e.lrClassWhenLogged)){var f=function(){d[a.hasUser()?"addClass":"removeClass"](e.lrClassWhenLogged)};b.bindToSecurity(f),f()}}}}var f="lr-hide";angular.module("letrest").directive("lrSecurity",a).directive("lrShowAtLeastOn",b).directive("lrShowWhenLogged",c).directive("lrHideWhenLogged",d).directive("lrClassWhenLogged",e),a.$inject=["LetRestSecurityEvents","$modal"],b.$inject=["LetRestSecurityService","LetRestSecurityEvents"],c.$inject=["LetRestSecurityService","LetRestSecurityEvents"],d.$inject=["LetRestSecurityService","LetRestSecurityEvents"],e.$inject=["LetRestSecurityService","LetRestSecurityEvents"]}(),function(){function a(a){return function(b,c){var d=[];return angular.forEach(b,function(b){void 0!=b.weight&&a.validate(b.weight,b[c])&&d.push(b)}),d}}function b(a){return function(b,c){return a.validate(b,c)}}angular.module("letrest").filter("lrHasPermissions",a).filter("lrIsAuthorized",b),a.$inject=["LetRestSecurityService"],b.$inject=["LetRestSecurityService"]}(),angular.module("letrest").run(["LetRestSecurityService",function(a){a.sync()}]);var httpInterceptor=function(a,b){a.factory("httpInterceptor",["$q","LetRestSecurityEvents",function(a,b){return{response:function(b){return b||a.when(b)},responseError:function(c){return 401===c.status&&b.doLogin(),403===c.status&&b.panic(new Error("You are trying to access a service that is beyond your rights.")),a.reject(c)}}}]),b.interceptors.push("httpInterceptor")};httpInterceptor.$inject=["$provide","$httpProvider"],angular.module("letrest").config(httpInterceptor),function(){function a(a){var b={PANIC:"PANIC@LR",SECURITY:"SECURITYCHANGED@LR",DOLOGIN:"DOLOGIN@LR",SYNC:"DOSYNC@LR"},c=this;c.panic=function(c){a.$broadcast(b.PANIC,c.toString&&!c.config?c.toString():"Connectivity problem")},c.securityChanged=a.$broadcast.bind(a,b.SECURITY),c.doLogin=a.$broadcast.bind(a,b.DOLOGIN),c.syncBegin=a.$broadcast.bind(a,b.SYNC,!0),c.syncEnd=function(){a.$broadcast(b.SYNC,!1),c.securityChanged()},c.bindToSync=a.$on.bind(a,b.SYNC),c.bindToDoLogin=a.$on.bind(a,b.DOLOGIN),c.bindToPanic=a.$on.bind(a,b.PANIC),c.bindToSecurity=a.$on.bind(a,b.SECURITY)}angular.module("letrest").service("LetRestSecurityEvents",a),a.$inject=["$rootScope"]}(),function(){function a(a,b,c,d,e,f,g){function h(a){return a?a:{name:"Guest",role:{name:"Guest",weight:-1}}}function i(){angular.copy(h(),o.session),delete e.TOKEN,f.securityChanged()}function j(){return o.session.role.weight>=0}function k(){function a(a){angular.copy(a.data.roles,o.roles),angular.copy(h(a.data.session),o.session)}function c(){d.info("Session synced"),o.syncing=!1,f.syncEnd()}function e(a){f.panic(a),d.error(a)}d.info("Syncing with server"),o.syncing=!0,f.syncBegin(),o.adjustSession(),b(g.URLS.REST.BASE.URL+"api/session/roles").get().$promise.then(a).then(f.securityChanged).catch(e).finally(c)}function l(){c.defaults.headers.common.Token=e.TOKEN}function m(c,d){function i(b){return b&&b.type&&"error"==b.type?a.reject(b.msg):(e.TOKEN=b.token,angular.copy(b.session.roles,o.roles),angular.copy(h(b.session.session),o.session),o.adjustSession(),f.securityChanged(),b.session)}return b(g.URLS.REST.BASE.URL+"api/session/login").save({},{username:c,password:d}).$promise.then(i)}function n(a,b){switch(b){case 2:return a==o.session.role.id;case 3:return a==o.session.role.weight;default:return a<=o.session.role.weight}}var o=this;o.syncing=!1,o.roles={},o.session=h(),o.logout=i,o.hasUser=j,o.sync=k,o.adjustSession=l,o.login=m,o.validate=n,o.securityType={weight:1,role:2,strict:3}}angular.module("letrest").service("LetRestSecurityService",a),a.$inject=["$q","$resource","$http","$log","$cookies","LetRestSecurityEvents","letrestConfig"]}(),angular.module("letrest").run(["$templateCache",function(a){a.put("letrest/view/security/LoginView.html",'<div class=modal-header><img src=images/logo_welcome.png class="img-responsive center-block"></div><div class=modal-body ng-init="Login.username=\'\';Login.password=\'\'"><form ng-submit=Login.login()><p class=text-center><input ng-model=Login.username placeholder=Username class=text-login></p><p class=text-center><input type=password ng-model=Login.password placeholder=Password class=text-login></p><p class=text-center><span class=text-warning>{{Login.error}}</span></p><p class=text-center><button class="btn btn-primary btn-sm" ng-class={disabled:isWorking}><span ng-if=Login.isWorking><i class="fa fa-spinner fa-spin"></i></span>Login</button></p></form></div><div class=modal-footer></div>'),a.put("letrest/view/security/PanicView.html",'<div class=modal-header><h3 class=modal-title>Unrecoverable Error</h3></div><div class=modal-body><p class="text-danger h1"><i class="fa fa-exclamation-triangle"></i>{{message||\'Undefined error\'}}</p><p class="text-danger h4">This happens because a critial requirement has failed, try reloading the page or contact your System Administrator.</p></div>')}]);